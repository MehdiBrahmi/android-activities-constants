
def generatedSrcDir = "$buildDir/generated/src/main/kotlin/"
android.sourceSets.main.java.srcDirs += ['src/main/kotlin', "$generatedSrcDir"]

task activitiesConstants {
    doLast {

        def packageId = android.defaultConfig.applicationId
        if (packageId == null) {
            // if applicationId is not set in build.gradle
            // we retrieve the applicationId from the AndroidManifest.xml
            packageId = new XmlSlurper().parse(android.sourceSets.main.manifest.srcFile).@package.text()
        }

        // Map<String,String> with :
        // key = The name of the module concatenated to the name of the activity
        // value = The canonical name of the activity
        def activities = [:]

        println "\nScanning activities in manifests :"
        rootProject.subprojects.each { module -> // for each modules
            file("${module.projectDir}/.").eachFileRecurse { file ->
                if (file.path.matches("^.*(src).*(AndroidManifest\\.xml)\$")) { // filter by **/src/**/AndroidManifest.xml
                    println file.path
                    def manifest = new XmlSlurper().parse(file)
                    def defaultPackage = manifest.@package.text() // packageId specified in manifest
                    if(defaultPackage == null) {
                        defaultPackage = module.android.defaultConfig.applicationId
                    }
                    manifest.application.activity.each { activity ->
                        def activityName = activity."@android:name".text()
                        def key = "${module.name}${activityName - defaultPackage}".replaceAll("\\.", "").replaceAll(/\B[A-Z]/) {
                            '_' + it
                        }.toUpperCase()
                        if (activityName.startsWith(".")) {
                            activities[key] = "$defaultPackage$activityName"
                        } else {
                            activities[key] = activityName
                        }
                    }
                }
            }
        }

        if (activities.size() > 0) {
            def genSrcDir = file("$generatedSrcDir/${packageId.replaceAll("\\.", "\\/")}")
            genSrcDir.mkdirs()
            def activityConstantKt = file("${genSrcDir.path}/ActivitiesConstant.kt")

            activityConstantKt.write "package $packageId\n\n"
            activityConstantKt << "object ActivitiesConstant {\n\n"

            println "\nActivities constants available -> ${activityConstantKt.path}"

            activities.each { activityConstant ->
                activityConstantKt << "    const val ${activityConstant.key}: String = \"${activityConstant.value}\"\n"
            }

            activityConstantKt << "\n"
            activityConstantKt << "}\n"

            println activityConstantKt.readLines().join("\n")

        }
    }
}

preBuild.dependsOn activitiesConstants
